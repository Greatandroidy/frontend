/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    sessions: Session;
    media: Media;
    categories: Category;
    casts: Cast;
    movies: Movie;
    pages: Page;
    series: Series;
    episodes: Episode;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  iconType?: ('upload' | 'url') | null;
  iconUpload?: (number | null) | Media;
  iconUrl?: string | null;
  role?: ('admin' | 'user' | 'premium') | null;
  verificationTokens?:
    | {
        identifier?: string | null;
        token?: string | null;
        expires?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  title?: string | null;
  rawContent?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: number;
  user: number | User;
  sessionToken: string;
  expires?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "casts".
 */
export interface Cast {
  id: number;
  name: string;
  role?: string | null;
  bio?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  photo?: (number | null) | Media;
  movies?: (number | Movie)[] | null;
  series?: (number | Series)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movies".
 */
export interface Movie {
  id: number;
  title: string;
  slug: string;
  icon?: (number | null) | Media;
  poster?: (number | null) | Media;
  releaseDate: string;
  description?: string | null;
  duration?: string | null;
  blocks?:
    | (
        | {
            videos?:
              | {
                  videoQuality: '720p' | '1080p' | '4k';
                  videoLink: string;
                  subtitles?:
                    | {
                        language: string;
                        url: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'video-block';
          }
        | {
            title: string;
            description?: string | null;
            thumbnail?: (number | null) | Media;
            videoUrl?: string | null;
            category?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'card-blocks';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "series".
 */
export interface Series {
  id: number;
  name: string;
  slug: string;
  poster?: (number | null) | Media;
  releaseDate: string;
  description?: string | null;
  seasons?:
    | {
        seasonNumber: number;
        episodes?: (number | Episode)[] | null;
        Category?: (number | null) | Category;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "episodes".
 */
export interface Episode {
  id: number;
  title: string;
  episodeNumber: number;
  description?: string | null;
  duration?: string | null;
  thumbnail?: (number | null) | Media;
  blocks?:
    | (
        | {
            videos?:
              | {
                  videoQuality: '720p' | '1080p' | '4k';
                  videoLink: string;
                  subtitles?:
                    | {
                        language: string;
                        url: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'video-block';
          }
        | {
            title: string;
            description?: string | null;
            thumbnail?: (number | null) | Media;
            videoUrl?: string | null;
            category?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'card-blocks';
          }
      )[]
    | null;
  releaseDate?: string | null;
  series: number | Series;
  seriesSlug?: string | null;
  seriesName?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  blocks?:
    | {
        series: number | Series;
        id?: string | null;
        blockName?: string | null;
        blockType: 'card-block';
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}